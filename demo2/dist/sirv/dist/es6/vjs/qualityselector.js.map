{"version":3,"sources":["../es6/sirv-modules/qualityselector.js"],"names":["Sirv","define","bHelpers","MenuItem","videojs","getComponent","QualitySelectorMenuItem","constructor","player","options","selectable","multiSelectable","_label","label","_value","value","isSelected","isSelected_","handleClick","event","plugin","hlsQualitySelectorAutoMode","selectedItem","currentSelection","selected","setQualityAndButtonLabel","dispose","registerComponent","MenuButton","Menu","QualitySelectorMenuButton","title","localize","name","levelItems","canShow","show","hide","createEl","el","labelEl_","dom","className","innerHTML","appendChild","buildCSSClass","buildWrapperCSSClass","createMenu","menu","forEach","item","addItem","children","find","setDysplayedQuality","newItems","quality","height","l","length","options_","visibility","update","Plugin","getPlugin","defaults","registerPlugin","getNearestValue","arr","result","last","i","Math","abs","QualitySelectorPlugin","menuButton","isAuto","minHeight","Number","MAX_SAFE_INTEGER","minDiffBitrate","hlsSources","hls","onAddQualityLevelHandler","onAddQualityLevel","bind","onQualityLevelChangeHandler","onQualityLevelChange","vhs","tech","IWillNotUseThisInPlugins","isVHS","qualityLevels","currentStreamHeight","playPromise","firstPlay","lastHLSHeight","min","max","createQualityButton","bindPlayerEvents","createHLSLevels","on","getCurrentStreamHeight","currentHeight","position","controlBar","addChild","componentClass","createLevelItems","levels","heights","map","levels_","sort","a","b","h","push","setAndGetSelectedItem","setQualityHLS","setQuality","reject","e","currentTime","isPaused","paused","src","host","index","type","play","catch","one","handleTechSeeked_","then","pause","error","smoothly","qualityList","selectedIndex","enabled","setIsAuto","unpressButton","recalc","off","onPlayerReady","ready","mergeOptions"],"mappings":"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","sourcesContent":["Sirv.define(\n    'qualitySelector',\n    ['bHelpers'],\n    (bHelpers) => {\n        \n        \n        /* eslint-env es6 */\n/* global videojs */\n\n\nconst MenuItem = videojs.getComponent('MenuItem');\n\nclass QualitySelectorMenuItem extends MenuItem {\n    constructor(player, options) {\n        options.selectable = true;\n        options.multiSelectable = false;\n\n        super(player, options);\n\n        this._label = options.label;\n        this._value = options.value;\n    }\n\n    get isSelected() { return this.isSelected_; }\n\n    get label() { return this._label; }\n\n    get value() { return this._value; }\n\n    handleClick(event) {\n        if (!this.isSelected_) {\n            const plugin = this.player().hlsQualitySelectorAutoMode;\n            const selectedItem = plugin.currentSelection();\n\n            super.handleClick(event);\n\n            if (selectedItem && selectedItem !== this) {\n                selectedItem.selected(false);\n            }\n\n            plugin.setQualityAndButtonLabel(this._value, true);\n        }\n    }\n\n    dispose() {\n        this._label = '';\n        this._value = 0;\n        this.isSelected_ = false;\n        super.dispose();\n    }\n}\n\n\n// QualitySelectorMenuItem.prototype.contentElType = 'button'; // TODO I do not know why the 'contentElType' prop is necessary, because the prop does not use in videojs\nMenuItem.registerComponent('QualitySelectorMenuItem', QualitySelectorMenuItem);\n\n/* eslint-env es6 */\n/* global videojs */\n/* global QualitySelectorMenuItem */\n\n\nconst MenuButton = videojs.getComponent('MenuButton');\nconst Menu = videojs.getComponent('Menu');\n\nclass QualitySelectorMenuButton extends MenuButton {\n    constructor(player, options) {\n        options.title = player.localize('Quality');\n        options.name = player.localize('QualityButton');\n\n        super(player, options);\n\n        this.levelItems = [];\n\n        if (this.canShow()) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n\n    createEl() {\n        const el = super.createEl();\n\n        this.labelEl_ = videojs.dom.createEl('div', {\n            className: 'vjs-quality-button-auto-mode-label',\n            innerHTML: 'auto'\n        });\n\n        el.appendChild(this.labelEl_);\n\n        return el;\n    }\n\n    buildCSSClass() {\n        return super.buildCSSClass() + ' vjs-quality-button-auto-mode-button';\n    }\n\n    buildWrapperCSSClass() {\n        return super.buildWrapperCSSClass() + ' vjs-quality-button-auto-mode';\n    }\n\n    createMenu() {\n        const menu = new Menu(this.player());\n\n        (this.levelItems || []).forEach((item) => {\n            menu.addItem(\n                new QualitySelectorMenuItem(this.player(), {\n                    label: item.label,\n                    value: item.value,\n                    selected: item.selected\n                })\n            );\n        });\n\n        // this.setDysplayedQuality();\n\n        return menu;\n    }\n\n    currentSelection() {\n        if (this.menu) {\n            return this.menu.children().find(item => item.isSelected) || null;\n        }\n\n        return null;\n    }\n\n    setDysplayedQuality() {\n        const currentSelection = this.currentSelection();\n        if (currentSelection) {\n            this.labelEl_.innerHTML = currentSelection.label;\n        }\n    }\n\n    set newItems(levelItems) {\n        this.levelItems = levelItems;\n    }\n\n    /**\n     * @param {any} height\n     */\n    set quality(height) {\n        this.menu.children().find(item => item.value === height).handleClick();\n    }\n\n    canShow() {\n        const l = this.levelItems?.length ?? 0;\n\n        if (this.options_.visibility && this.levelItems && (this.levelItems.length > 1 && this.levelItems[l - 1].value !== 'auto' || this.levelItems.length > 2)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    show() {\n        if (this.canShow()) {\n            super.show();\n        }\n    }\n\n    update() {\n        super.update();\n        this.setDysplayedQuality();\n    }\n\n    dispose() {\n        this.levelItems = [];\n        super.dispose();\n    }\n}\n\nMenuButton.registerComponent('QualitySelectorMenuButton', QualitySelectorMenuButton);\n\n/* eslint-env es6 */\n/* global videojs */\n/* global QualitySelectorMenuButton */\n\n\nconst Plugin = videojs.getPlugin('plugin');\n\n// Default options for the plugin.\nconst defaults = {\n    visibility: true\n};\n\n// Cross-compatibility for Video.js 5 and 6.\nconst registerPlugin = videojs.registerPlugin || videojs.plugin;\n\n\n/**\n * Check if the level list has bitrate properties\n *\n */\n// const bitrateExist = (levels) => {\n//     return levels.filter((level) => { return !!level.bitrate; }).length === levels.length;\n// };\n\n/**\n * Calc min difference between bitrates\n *\n */\n// const getMinBitrateDifference = (levels, defDiff) => {\n//     let result = defDiff;\n\n//     for (let i = 1, l = levels.length; i < l; i++) {\n//         const diff = Math.abs(levels[i].bitrate - levels[i - 1].bitrate);\n//         if (diff < result) {\n//             result = diff;\n//         }\n//     }\n\n//     return result;\n// };\n\nconst getNearestValue = (value, arr) => {\n    let result = arr[0].value;\n    const l = arr.length - 1;\n    let last = l - 1;\n\n    if (last > -1) {\n        result = arr[last].value;\n        if (arr[last].value === 'auto') {\n            last -= 1;\n        }\n    }\n\n    if (l > 2) {\n        for (let i = last - 1; i >= 0; i--) {\n            if (value > arr[i + 1].value) {\n                if (value <= arr[i].value) {\n                    if (Math.abs(arr[i + 1].value - value) < Math.abs(arr[i].value - value)) {\n                        result = arr[i + 1].value;\n                    } else {\n                        result = arr[i].value;\n                    }\n                    break;\n                } else {\n                    result = arr[i].value;\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    return result;\n};\n\nclass QualitySelectorPlugin extends Plugin {\n    constructor(player, options) {\n        super(player);\n\n        this.options = options;\n\n        this.menuButton = null;\n        this.isAuto = true;\n        this.minHeight = Number.MAX_SAFE_INTEGER;\n        this.minDiffBitrate = Number.MAX_SAFE_INTEGER;\n        this.hlsSources = options.hls || [];\n\n        this.onAddQualityLevelHandler = this.onAddQualityLevel.bind(this);\n        this.onQualityLevelChangeHandler = this.onQualityLevelChange.bind(this);\n        // this.onTimeupdateHandler = this.onTimeupdate.bind(this);\n\n        this.vhs = this.player.tech({ IWillNotUseThisInPlugins: true }).vhs;\n        this.isVHS = this.player.qualityLevels && this.vhs;\n\n        this.currentStreamHeight = 0;\n        this.levelItems = null;\n        this.playPromise = null;\n        this.firstPlay = true;\n        this.lastHLSHeight = null;\n        this.min = this.options.min;\n        this.max = this.options.max;\n\n\n        // If there is quality levels plugin and the VHS tech exists then continue.\n        if (this.isVHS) {\n            this.createQualityButton();\n            this.bindPlayerEvents();\n        } else if (this.hlsSources.length) {\n            this.isAuto = false;\n            this.createQualityButton();\n            this.createHLSLevels();\n        }\n    }\n\n    /**\n     * Binds listener for quality level changes.\n     */\n    bindPlayerEvents() {\n        const qualityLevels = this.player.qualityLevels();\n        qualityLevels.on('addqualitylevel', this.onAddQualityLevelHandler);\n        qualityLevels.on('change', this.onQualityLevelChangeHandler);\n        // this.player.on('timeupdate', this.onTimeupdateHandler);\n    }\n\n    onQualityLevelChange() {\n        this.menuButton.setDysplayedQuality();\n    }\n\n    // onTimeupdate() {\n    //     if (this.isAuto) {\n    //         this.checkCurrentQuality();\n    //     }\n    // }\n\n    getCurrentStreamHeight() {\n        if (this.levelItems) {\n            this.currentStreamHeight = getNearestValue(this.player.currentHeight(), this.levelItems);\n\n            if (this.currentStreamHeight < this.min) {\n                this.currentStreamHeight = this.min;\n            }\n\n            if (this.currentStreamHeight > this.max) {\n                this.currentStreamHeight = this.max;\n            }\n        }\n    }\n\n    /*\n    checkCurrentQuality(force) {\n        const currentBandwidth = this.vhs.systemBandwidth;\n\n        if (Math.abs(this.lastBandwidth - currentBandwidth) >= this.minDiffBitrate || force) {\n            let nextHeight = this.minHeight;\n\n            (this.player.qualityLevels().levels_ || []).forEach((level) => {\n                if (level.bitrate <= currentBandwidth && level.height > nextHeight) {\n                    nextHeight = level.height;\n\n                    if (this.currentStreamHeight && nextHeight > this.currentStreamHeight) {\n                        nextHeight = this.currentStreamHeight;\n                    }\n                }\n            });\n\n            if (nextHeight < this.min) {\n                nextHeight = this.min;\n            }\n\n            if (nextHeight > this.max) {\n                nextHeight = this.max;\n            }\n\n            this.setQuality(nextHeight, !force);\n\n            this.lastBandwidth = currentBandwidth;\n        }\n    }\n    */\n\n    /**\n     * Adds the quality menu button to the player control bar.\n     */\n    createQualityButton() {\n        this.menuButton = new QualitySelectorMenuButton(this.player, {\n            visibility: this.options.visibility\n        });\n\n        // const fst = this.player.controlBar.getChild('fullscreenToggle');\n        // this.player.controlBar.addChild(this.menuButton, { componentClass: 'qualitySelector' }, this.player.controlBar.options_.children.length - (fst ? 2 : 1));\n        const position = this.player.controlBar.options_.children.length - 2;\n        this.player.controlBar.addChild(this.menuButton, { componentClass: 'qualitySelector' }, position);\n    }\n\n    createLevelItems(levels) {\n        const heights = levels.map(l => l.height);\n\n        // Set min/max quality\n        this.min = Math.min(Math.max(...heights), this.options.min);\n        this.max = Math.max(Math.min(...heights), this.min, this.options.max);\n\n        this.minHeight = this.min;\n\n        // Quality levels\n        const levels_ = heights.sort((a, b) => b - a).map(h => ({ label: h + 'p', value: h, selected: false }));\n\n        if (levels_.length > 1) {\n            levels_.push({ label: 'auto', value: 'auto', selected: false });\n        }\n\n        return levels_;\n    }\n\n    setAndGetSelectedItem(levelItems) {\n        this.getCurrentStreamHeight();\n        const selectedItem = levelItems[levelItems.length - 1];\n        selectedItem.selected = true;\n        this.isAuto = selectedItem.value === 'auto';\n\n        return selectedItem;\n    }\n\n    createHLSLevels() {\n        this.levelItems = this.createLevelItems(this.hlsSources);\n\n        const selectedItem = this.setAndGetSelectedItem(this.levelItems);\n\n        this.setQualityHLS(selectedItem.value);\n        this.menuButton.newItems = this.levelItems;\n        this.menuButton.update();\n    }\n\n    /**\n     * Executed when a quality level is added from HLS playlist.\n     */\n    onAddQualityLevel() {\n        const levels = this.player.qualityLevels().levels_ || [];\n        this.levelItems = this.createLevelItems(levels);\n\n        // if (bitrateExist(levels)) {\n        //     this.minDiffBitrate = getMinBitrateDifference(levels, this.minDiffBitrate);\n        //     this.lastBandwidth = this.vhs.systemBandwidth;\n        // }\n\n        this.setAndGetSelectedItem(this.levelItems);\n\n        // this.checkCurrentQuality(true);\n        this.setQuality(null, true);\n\n        this.menuButton.newItems = this.levelItems;\n        this.menuButton.update();\n    }\n\n    setQualityHLS(height) {\n        const player = this.player;\n        let value = null;\n\n        if (height === 'auto') {\n            height = this.currentStreamHeight;\n        }\n\n        if (height === this.lastHLSHeight) { return; }\n\n        for (let i = 0, l = this.hlsSources.length; i < l; i++) {\n            if (height === this.hlsSources[i].height) {\n                value = this.hlsSources[i];\n                break;\n            }\n        }\n\n        if (value) {\n            if (this.playPromise) {\n                try {\n                    this.playPromise.reject();\n                } catch (e) {\n                    // empty\n                }\n\n                this.playPromise = null;\n            }\n\n            const currentTime = player.currentTime();\n            const isPaused = player.paused();\n\n            player.src({\n                src: this.options.host + value.index,\n                type: 'application/x-mpegURL'\n            });\n\n            this.lastHLSHeight = height;\n\n            if (!this.firstPlay) {\n                this.playPromise = this.player.play();\n                // eslint-disable-next-line\n                this.playPromise.catch((e) => { this.playPromise = null; });\n            }\n\n            player.one('loadedmetadata', () => {\n                if (currentTime) {\n                    this.player.currentTime(currentTime);\n                    this.player.handleTechSeeked_();\n                }\n\n                if (isPaused) {\n                    // if (!this.firstPlay) {\n                    //     player.pause();\n                    // }\n                    this.firstPlay = false;\n\n                    if (this.playPromise) {\n                        this.playPromise.then(() => {\n                            this.player.pause();\n                            this.playPromise = null;\n                        // eslint-disable-next-line\n                        }).catch((error) => {\n                            this.playPromise = null;\n                            // Auto-play was prevented\n                            // Show paused UI.\n                        });\n                    }\n                }\n            });\n        }\n    }\n\n    setQuality(height, smoothly) {\n        const qualityList = this.player.qualityLevels();\n\n        // Force VHS module to re-select quality levels.\n        // Don't force reselection upon level is added (height == null).\n        if (smoothly && height !== null) {\n            for (let i = qualityList.length - 1; i >= 0; i--) {\n                if (i !== qualityList.selectedIndex) {\n                    qualityList[i].enabled = false;\n                }\n            }\n        }\n\n        for (let i = 0, l = qualityList.length; i < l; i++) {\n            const quality = qualityList[i];\n            if (smoothly) {\n                // quality.enabled = quality.height >= height && quality.height >= this.min && quality.height <= this.max;\n                quality.enabled = quality.height >= this.min && quality.height <= this.max;\n            } else {\n                quality.enabled = quality.height === height;\n            }\n        }\n    }\n\n    /**\n     * Sets quality (based on media height)\n     *\n     * @param {number} height - A number representing HLS playlist.\n     */\n    setQualityAndButtonLabel(height, setIsAuto) {\n        if (setIsAuto) { // by control\n            this.isAuto = height === 'auto';\n        }\n\n        if (this.isVHS) {\n            if (this.isAuto) {\n                // this.checkCurrentQuality();\n                this.setQuality(height, true);\n            } else {\n                this.setQuality(height);\n            }\n        } else {\n            this.setQualityHLS(height);\n        }\n\n        this.menuButton.setDysplayedQuality();\n        this.menuButton.unpressButton();\n    }\n\n    currentSelection() {\n        return this.menuButton.currentSelection();\n    }\n\n    recalc() {\n        this.getCurrentStreamHeight();\n\n        if (this.isAuto) {\n            this.setQualityAndButtonLabel(this.currentStreamHeight);\n        }\n    }\n\n    dispose() {\n        // this.player.off('timeupdate', this.onTimeupdateHandler);\n\n        if (this.isVHS) {\n            const qualityLevels = this.player.qualityLevels();\n            qualityLevels.off('addqualitylevel', this.onAddQualityLevelHandler);\n            qualityLevels.off('change', this.onQualityLevelChangeHandler);\n        }\n\n        try {\n            super.dispose();\n        } catch (e) {\n            // empty\n        }\n    }\n}\n\n/**\n * Function to invoke when the player is ready.\n *\n * This is a great place for your plugin to initialize itself. When this\n * function is called, the player will have its DOM and child components\n * in place.\n *\n * @function onPlayerReady\n * @param    {Player} player\n *           A Video.js player object.\n *\n * @param    {Object} [options={}]\n *           A plain object containing options for the plugin.\n */\nconst onPlayerReady = (player, options) => {\n    player.hlsQualitySelectorAutoMode = new QualitySelectorPlugin(player, options);\n};\n\n/**\n * A video.js plugin.\n *\n * In the plugin function, the value of `this` is a video.js `Player`\n * instance. You cannot rely on the player being in a \"ready\" state here,\n * depending on how the plugin is invoked. This may or may not be important\n * to you; if not, remove the wait for \"ready\"!\n *\n * @function hlsQualitySelector\n * @param    {Object} [options={}]\n *           An object of options left to the plugin author to define.\n */\nconst hlsQualitySelectorAutoMode = function (options) {\n    this.ready(() => {\n        onPlayerReady(this, videojs.mergeOptions(defaults, options));\n    });\n};\n\n// Register the plugin with video.js.\nregisterPlugin('hlsQualitySelectorAutoMode', hlsQualitySelectorAutoMode);\n\nreturn hlsQualitySelectorAutoMode;\n\n    }\n);\n"],"file":"qualityselector.js"}